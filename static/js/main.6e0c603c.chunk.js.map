{"version":3,"sources":["Board.tsx","App.tsx","index.tsx"],"names":["State","color","field","Empty","PlayerA","PlayerB","DominatedA","DominatedB","add","p","v","q","r","unitVectors","Game","size","board","turnPlayer","turnMove","turnNumber","immerable","diameter","this","i","push","Array","fill","console","assert","inBounds","sideLen","diamLen","dir","produce","draft","p2","at","includes","dominator","playerA","playerB","Math","ceil","length","Board","useState","game","setGame","hexSmallD","sqrt","hexSmallR","type","min","value","onChange","evt","Number","target","onClick","style","width","window","innerWidth","height","flatMap","row","startX","cell","sides","radius","stroke","strokeWidth","x","y","key","player","button","prev","move","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e0c603c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Stage, Layer, RegularPolygon } from \"react-konva\";\nimport { produce, immerable } from \"immer\";\n\nenum State {\n    Empty,\n    PlayerA,\n    PlayerB,\n    DominatedA,\n    DominatedB,\n}\n\ntype Player = State.PlayerA | State.PlayerB;\n\nconst color = (field: State) => {\n    switch (field) {\n        case State.Empty: return '#FCDC5F';\n        case State.PlayerA: return '#D2111B';\n        case State.PlayerB: return '#3F48CC';\n        case State.DominatedA: return '#F8A7AB';\n        case State.DominatedB: return '#CACDF0';\n    }\n}\n\nconst isEnemy = (player: Player, field: State) => {\n    if (player === State.PlayerA) {\n        return [State.PlayerB, State.DominatedB].includes(field);\n    } else {\n        return [State.PlayerA, State.DominatedA].includes(field);\n    }\n}\n\nconst isEmpty = (field: State) => ![State.PlayerA, State.PlayerB].includes(field);\n\ninterface Point {\n    q: number,\n    r: number,\n}\n\nconst add = (p: Point, v: Point): Point => ({ q: p.q + v.q, r: p.r + v.r });\n\nconst unitVectors: Point[] = [\n    { q: -1, r: 0 },\n    { q: 0, r: -1 },\n    { q: 1, r: -1 },\n    { q: 1, r: 0 },\n    { q: 0, r: 1 },\n    { q: -1, r: 1 },\n];\n\nclass Game {\n    board: State[][]\n    turnPlayer: Player\n    turnMove: number\n    turnNumber: number\n\n    [immerable] = true\n\n    constructor(size: number) {\n        const diameter = size * 2 - 1;\n        this.board = [];\n        for (let i = 0; i < diameter; i += 1) {\n            this.board.push(Array(diameter).fill(State.Empty));\n        }\n        this.turnPlayer = State.PlayerA;\n        this.turnMove = 1;\n        this.turnNumber = 1;\n    }\n\n    get sideLen() {\n        return Math.ceil(this.board.length / 2);\n    }\n\n    get diamLen() {\n        return this.board.length;\n    }\n\n    at(p: Point) {\n        console.assert(this.inBounds(p));\n        return this.board[p.r][p.q];\n    }\n\n    inBounds(p: Point) {\n        return p.q >= 0 && p.r >= 0 && p.q + p.r >= this.sideLen - 1 && p.q < this.diamLen && p.r < this.diamLen && p.r + p.q < this.diamLen + this.sideLen - 1;\n    }\n\n    move(p: Point) {\n        console.dir(this)\n        return produce(this, draft => {\n            draft.board[p.r][p.q] = draft.turnPlayer;\n            for (const v of unitVectors) {\n                let p2 = add(p, v);\n                while (draft.inBounds(p2) && isEmpty(draft.at(p2))) {\n                    draft.board[p2.r][p2.q] = draft.dominator(p2);\n                    p2 = add(p2, v);\n                }\n            }\n            if (draft.turnMove === 1 && draft.turnNumber > 2) {\n                draft.turnMove += 1;\n            } else {\n                draft.turnMove = 1;\n                draft.turnPlayer = draft.turnPlayer === State.PlayerA ? State.PlayerB : State.PlayerA;\n                draft.turnNumber += 1;\n            }\n        });\n    }\n\n    dominator(p: Point) {\n        let playerA = 0;\n        let playerB = 0;\n        for (const v of unitVectors) {\n            let p2 = p;\n            while (true) {\n                p2 = add(p2, v);\n                if (!this.inBounds(p2)) break;\n\n                if (this.at(p2) === State.PlayerA) {\n                    playerA += 1;\n                } else if (this.at(p2) === State.PlayerB) {\n                    playerB += 1;\n                }\n            }\n        }\n        if (playerA === playerB) {\n            return State.Empty;\n        } else if (playerA > playerB) {\n            return State.DominatedA;\n        } else {\n            return State.DominatedB;\n        }\n    }\n}\n\nconst Board = () => {\n    const [game, setGame] = useState(() => new Game(6));\n\n    const stageH = 800;\n    const hexBigR = 30;\n    const hexSmallD = Math.sqrt(3) * hexBigR;\n    const hexSmallR = hexSmallD / 2;\n\n    return <>\n        <div>\n            Board size: <input type=\"number\" min={1} value={game.sideLen} onChange={evt => setGame(new Game(Number(evt.target.value)))} />\n        </div>\n        <div>\n            Turn {game.turnNumber}, move {game.turnMove}. <button onClick={() => setGame(new Game(game.sideLen))}>Reset</button>\n        </div>\n        <div>\n            <span style={{ color: color(game.turnPlayer) }}>{game.turnPlayer === State.PlayerA ? 'Red' : 'Blue'}</span> player's turn.\n        </div>\n        <Stage width={window.innerWidth} height={stageH}>\n            <Layer>\n                {game.board.flatMap((row, r) => {\n                    const startX = r * hexSmallR;\n                    return row.flatMap((cell, q) => {\n                        const p = { q, r };\n                        if (!game.inBounds(p)) return [];\n\n                        return [<RegularPolygon\n                            sides={6}\n                            radius={hexBigR}\n                            fill={color(cell)}\n                            stroke=\"black\"\n                            strokeWidth={1}\n                            x={50 + startX + hexSmallD * q}\n                            y={50 + (hexBigR + hexSmallR / 2) * r}\n                            key={`${q}_${r}`}\n                            onClick={evt => {\n                                if (evt.evt.button !== 0) return;\n                                if (isEnemy(game.turnPlayer, game.at(p))) return;\n\n                                setGame(prev => prev.move(p));\n                            }}\n                        />];\n                    })\n                })}\n            </Layer>\n        </Stage>\n    </>\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nconst App = () => {\n    return <div className=\"App\">\n        <Board/>\n    </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}