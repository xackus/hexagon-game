{"version":3,"sources":["Board.tsx","App.tsx","index.tsx"],"names":["State","color","field","Empty","PlayerA","PlayerB","DominatedA","DominatedB","playerNameHtml","player","style","canPlace","add","p","v","q","r","unitVectors","Game","size","board","turnPlayer","turnMove","turnNumber","immerable","diameter","this","i","push","Array","fill","console","assert","inBounds","sideLen","diamLen","produce","draft","p2","at","includes","dominator","playerA","playerB","Math","ceil","length","Board","useState","game","setGame","stageW","window","innerWidth","hexSmallD","sqrt","hexSmallR","scores","countScores","winner","some","row","cell","type","min","value","onChange","evt","Number","target","onClick","width","height","flatMap","startX","sides","radius","stroke","strokeWidth","x","y","hexBigR","key","button","prev","move","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.becef2af.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Stage, Layer, RegularPolygon } from \"react-konva\";\nimport { produce, immerable } from \"immer\";\n\nenum State {\n    Empty,\n    PlayerA,\n    PlayerB,\n    DominatedA,\n    DominatedB,\n}\n\ntype Player = State.PlayerA | State.PlayerB;\n\nconst color = (field: State) => {\n    switch (field) {\n        case State.Empty: return '#FCDC5F';\n        case State.PlayerA: return '#D2111B';\n        case State.PlayerB: return '#3F48CC';\n        case State.DominatedA: return '#F8A7AB';\n        case State.DominatedB: return '#CACDF0';\n    }\n}\n\nconst playerNameHtml = (player: Player) => <span style={{ color: color(player) }}>{player === State.PlayerA ? 'Red' : 'Blue'}</span>;\n\nconst canPlace = (field: State) => field === State.Empty;\n\nconst isEmpty = (field: State) => ![State.PlayerA, State.PlayerB].includes(field);\n\ninterface Point {\n    q: number,\n    r: number,\n}\n\nconst add = (p: Point, v: Point): Point => ({ q: p.q + v.q, r: p.r + v.r });\n\nconst unitVectors: Point[] = [\n    { q: -1, r: 0 },\n    { q: 0, r: -1 },\n    { q: 1, r: -1 },\n    { q: 1, r: 0 },\n    { q: 0, r: 1 },\n    { q: -1, r: 1 },\n];\n\nclass Game {\n    board: State[][]\n    turnPlayer: Player\n    turnMove: number\n    turnNumber: number\n\n    [immerable] = true\n\n    constructor(size: number) {\n        const diameter = size * 2 - 1;\n        this.board = [];\n        for (let i = 0; i < diameter; i += 1) {\n            this.board.push(Array(diameter).fill(State.Empty));\n        }\n        this.turnPlayer = State.PlayerA;\n        this.turnMove = 1;\n        this.turnNumber = 1;\n    }\n\n    get sideLen() {\n        return Math.ceil(this.board.length / 2);\n    }\n\n    get diamLen() {\n        return this.board.length;\n    }\n\n    at(p: Point) {\n        console.assert(this.inBounds(p));\n        return this.board[p.r][p.q];\n    }\n\n    inBounds(p: Point) {\n        return p.q >= 0 && p.r >= 0 && p.q + p.r >= this.sideLen - 1 && p.q < this.diamLen && p.r < this.diamLen && p.r + p.q < this.diamLen + this.sideLen - 1;\n    }\n\n    move(p: Point) {\n        return produce(this, draft => {\n            draft.board[p.r][p.q] = draft.turnPlayer;\n            for (const v of unitVectors) {\n                let p2 = add(p, v);\n                while (draft.inBounds(p2) && isEmpty(draft.at(p2))) {\n                    draft.board[p2.r][p2.q] = draft.dominator(p2);\n                    p2 = add(p2, v);\n                }\n            }\n            if (draft.turnMove === 1 && draft.turnNumber > 1) {\n                draft.turnMove += 1;\n            } else {\n                draft.turnMove = 1;\n                draft.turnPlayer = draft.turnPlayer === State.PlayerA ? State.PlayerB : State.PlayerA;\n                draft.turnNumber += 1;\n            }\n        });\n    }\n\n    dominator(p: Point) {\n        let playerA = 0;\n        let playerB = 0;\n        for (const v of unitVectors) {\n            let p2 = p;\n            while (true) {\n                p2 = add(p2, v);\n                if (!this.inBounds(p2)) break;\n\n                if (this.at(p2) === State.PlayerA) {\n                    playerA += 1;\n                    break;\n                } else if (this.at(p2) === State.PlayerB) {\n                    playerB += 1;\n                    break;\n                }\n            }\n        }\n        if (playerA === playerB) {\n            return State.Empty;\n        } else if (playerA > playerB) {\n            return State.DominatedA;\n        } else {\n            return State.DominatedB;\n        }\n    }\n\n    countScores() {\n        let playerA = 0;\n        let playerB = 0;\n        for (let r = 0; r < this.diamLen; r += 1) {\n            for (let q = 0; q < this.diamLen; q += 1) {\n                const p: Point = { q, r };\n                if (!this.inBounds(p)) continue;\n\n                if (this.at(p) === State.DominatedA) {\n                    playerA += 1;\n                } else if (this.at(p) === State.DominatedB) {\n                    playerB += 1;\n                }\n            }\n        }\n        return { playerA, playerB };\n    }\n}\n\nconst Board = () => {\n    const [game, setGame] = useState(() => new Game(6));\n\n    const stageW = window.innerWidth;\n    const stageH = 800;\n    const hexBigR = 30;\n    const hexSmallD = Math.sqrt(3) * hexBigR;\n    const hexSmallR = hexSmallD / 2;\n\n    const scores = game.countScores();\n\n    let winner: Player | State.Empty = State.Empty;\n    if (!game.board.some((row, r) => row.some((cell, q) => game.inBounds({ q, r }) && canPlace(cell)))) {\n        winner = scores.playerA > scores.playerB ? State.PlayerA : State.PlayerB;\n    }\n\n    return <>\n        <div>\n            Board size: <input type=\"number\" min={1} value={game.sideLen} onChange={evt => setGame(new Game(Number(evt.target.value)))} />\n        </div>\n        <div>\n            Turn {game.turnNumber}, move {game.turnMove}.{' '}\n            {playerNameHtml(State.PlayerA)} has {scores.playerA} fields. {playerNameHtml(State.PlayerB)} has {scores.playerB} fields.{' '}\n            <button onClick={() => setGame(new Game(game.sideLen))}>Reset</button>\n        </div>\n        <div>\n            {winner !== State.Empty\n                ? <>Player {playerNameHtml(winner)} won.</>\n                : <>{playerNameHtml(game.turnPlayer)} player's turn.</>\n            }\n        </div>\n        <Stage width={stageW} height={stageH}>\n            <Layer>\n                {game.board.flatMap((row, r) => {\n                    const startX = r * hexSmallR;\n                    return row.flatMap((cell, q) => {\n                        const p = { q, r };\n                        if (!game.inBounds(p)) return [];\n\n                        return [<RegularPolygon\n                            sides={6}\n                            radius={hexBigR}\n                            fill={color(cell)}\n                            stroke=\"black\"\n                            strokeWidth={1}\n                            x={50 + startX + hexSmallD * q}\n                            y={50 + (hexBigR * 1.5) * r}\n                            key={`${q}_${r}`}\n                            onClick={evt => {\n                                if (evt.evt.button !== 0) return;\n                                if (!canPlace(game.at(p))) return;\n\n                                setGame(prev => prev.move(p));\n                            }}\n                        />];\n                    })\n                })}\n            </Layer>\n        </Stage>\n    </>\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nconst App = () => {\n    return <div className=\"App\">\n        <Board/>\n    </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}