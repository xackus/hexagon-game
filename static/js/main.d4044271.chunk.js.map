{"version":3,"sources":["Board.tsx","App.tsx","index.tsx"],"names":["State","color","field","Empty","PlayerA","PlayerB","DominatedA","DominatedB","playerNameHtml","player","style","canPlace","state","isEmpty","includes","add","p","v","q","r","unitVectors","Game","size","board","turnPlayer","turnMove","turnNumber","immerable","diameter","this","i","push","Array","fill","visibleA","visibleB","console","assert","inBounds","sideLen","diamLen","produce","draft","p2","at","dominator","playerA","playerB","Math","ceil","length","Board","useState","game","setGame","hexSmallD","sqrt","hexSmallR","scores","countScores","winner","some","row","cell","Draw","boardWidth","stageW","margin","stageH","offsetX","type","min","value","onChange","evt","Number","target","onClick","width","height","flatMap","outOfBoundsWidth","rowStartX","centerX","centerY","hexBigR","sides","radius","stroke","strokeWidth","x","y","key","button","prev","move","text","abs","toString","align","verticalAlign","fontSize","listening","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4044271.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Stage, Layer, RegularPolygon, Text } from \"react-konva\";\nimport { produce, immerable } from \"immer\";\n\nenum State {\n    Empty,\n    PlayerA,\n    PlayerB,\n    DominatedA,\n    DominatedB,\n    Draw,\n}\n\ntype FieldState = Exclude<State, State.Draw>;\ntype EmptyFieldState = Exclude<FieldState, Player>;\ntype Player = State.PlayerA | State.PlayerB;\n\nconst color = (field: FieldState) => {\n    switch (field) {\n        case State.Empty: return '#FCDC5F';\n        case State.PlayerA: return '#D2111B';\n        case State.PlayerB: return '#3F48CC';\n        case State.DominatedA: return '#F8A7AB';\n        case State.DominatedB: return '#CACDF0';\n    }\n}\n\nconst playerNameHtml = (player: Player) => <span style={{ color: color(player) }}>{player === State.PlayerA ? 'Red' : 'Blue'}</span>;\n\nconst canPlace = (field: Field) => field.state === State.Empty;\n\nconst isEmpty = (field: Field): field is EmptyField => ![State.PlayerA, State.PlayerB].includes(field.state);\n\ninterface Point {\n    q: number,\n    r: number,\n}\n\nconst add = (p: Point, v: Point): Point => ({ q: p.q + v.q, r: p.r + v.r });\n\nconst unitVectors: Point[] = [\n    { q: -1, r: 0 },\n    { q: 0, r: -1 },\n    { q: 1, r: -1 },\n    { q: 1, r: 0 },\n    { q: 0, r: 1 },\n    { q: -1, r: 1 },\n];\n\ninterface EmptyField {\n    state: EmptyFieldState,\n    visibleA: number,\n    visibleB: number,\n}\n\ninterface TakenField {\n    state: Player,\n}\n\ntype Field = EmptyField | TakenField;\n\nclass Game {\n    board: Field[][]\n    turnPlayer: Player\n    turnMove: number\n    turnNumber: number\n\n    [immerable] = true\n\n    constructor(size: number) {\n        const diameter = size * 2 - 1;\n        this.board = [];\n        for (let i = 0; i < diameter; i += 1) {\n            this.board.push(Array(diameter).fill({ state: State.Empty, visibleA: 0, visibleB: 0 }));\n        }\n        this.turnPlayer = State.PlayerA;\n        this.turnMove = 1;\n        this.turnNumber = 1;\n    }\n\n    get sideLen() {\n        return Math.ceil(this.board.length / 2);\n    }\n\n    get diamLen() {\n        return this.board.length;\n    }\n\n    at(p: Point) {\n        console.assert(this.inBounds(p));\n        return this.board[p.r][p.q];\n    }\n\n    inBounds(p: Point) {\n        return p.q >= 0 && p.r >= 0 && p.q + p.r >= this.sideLen - 1 && p.q < this.diamLen && p.r < this.diamLen && p.r + p.q < this.diamLen + this.sideLen - 1;\n    }\n\n    move(p: Point) {\n        return produce(this, draft => {\n            draft.board[p.r][p.q] = {state: draft.turnPlayer};\n            for (const v of unitVectors) {\n                let p2 = add(p, v);\n                while (draft.inBounds(p2) && isEmpty(draft.at(p2))) {\n                    draft.board[p2.r][p2.q] = draft.dominator(p2);\n                    p2 = add(p2, v);\n                }\n            }\n            if (draft.turnMove === 1 && draft.turnNumber > 1) {\n                draft.turnMove += 1;\n            } else {\n                draft.turnMove = 1;\n                draft.turnPlayer = draft.turnPlayer === State.PlayerA ? State.PlayerB : State.PlayerA;\n                draft.turnNumber += 1;\n            }\n        });\n    }\n\n    dominator(p: Point): EmptyField {\n        let visibleA = 0;\n        let visibleB = 0;\n        for (const v of unitVectors) {\n            let p2 = p;\n            while (true) {\n                p2 = add(p2, v);\n                if (!this.inBounds(p2)) break;\n\n                if (this.at(p2).state === State.PlayerA) {\n                    visibleA += 1;\n                    break;\n                } else if (this.at(p2).state === State.PlayerB) {\n                    visibleB += 1;\n                    break;\n                }\n            }\n        }\n        let state: EmptyFieldState;\n        if (visibleA === visibleB) {\n            state = State.Empty;\n        } else if (visibleA > visibleB) {\n            state = State.DominatedA;\n        } else {\n            state = State.DominatedB;\n        }\n        return {state, visibleA, visibleB};\n    }\n\n    countScores() {\n        let playerA = 0;\n        let playerB = 0;\n        for (let r = 0; r < this.diamLen; r += 1) {\n            for (let q = 0; q < this.diamLen; q += 1) {\n                const p: Point = { q, r };\n                if (!this.inBounds(p)) continue;\n\n                if (this.at(p).state === State.DominatedA) {\n                    playerA += 1;\n                } else if (this.at(p).state === State.DominatedB) {\n                    playerB += 1;\n                }\n            }\n        }\n        return { playerA, playerB };\n    }\n}\n\nconst Board = () => {\n    const [game, setGame] = useState(() => new Game(6));\n\n    const hexBigR = 30;\n    const hexBigD = hexBigR * 2;\n    const hexSmallD = Math.sqrt(3) * hexBigR;\n    const hexSmallR = hexSmallD / 2;\n\n    const scores = game.countScores();\n\n    let winner: Player | State.Empty | State.Draw = State.Empty;\n\n    if (!game.board.some((row, r) => row.some((cell, q) => game.inBounds({ q, r }) && canPlace(cell)))) {\n        if (scores.playerA === scores.playerB) {\n            winner = State.Draw;\n        } else if (scores.playerA > scores.playerB) {\n            winner = State.PlayerA;\n        } else {\n            winner = State.PlayerB;\n        }\n    }\n\n    const boardWidth = game.diamLen * hexSmallD;\n    const boardHeight = game.diamLen * hexBigR * 1.5;\n\n    const margin = 30;\n    const stageW = boardWidth + margin * 2;\n    const stageH = boardHeight + margin * 2;\n\n    const offsetX = stageW / 2 - boardWidth / 2 + hexSmallR;\n    const offsetY = margin + hexBigR * 0.75;\n\n    return <>\n        <div>\n            Board size: <input type=\"number\" min={1} value={game.sideLen} onChange={evt => setGame(new Game(Number(evt.target.value)))} />\n        </div>\n        <div>\n            Turn {game.turnNumber}, move {game.turnMove}.{' '}\n            {playerNameHtml(State.PlayerA)} has {scores.playerA} fields. {playerNameHtml(State.PlayerB)} has {scores.playerB} fields.{' '}\n            <button onClick={() => setGame(new Game(game.sideLen))}>Reset</button>\n        </div>\n        <div>\n            {winner === State.Empty\n                ? <>{playerNameHtml(game.turnPlayer)} player's turn.</>\n                : winner === State.Draw\n                    ? <>Draw.</>\n                    : <>Player {playerNameHtml(winner)} won.</>\n            }\n        </div>\n        <div style={{ margin: 'auto', width: 'max-content' }}>\n            <Stage width={stageW} height={stageH}>\n                <Layer>\n                    {game.board.flatMap((row, r) => {\n                        const outOfBoundsWidth = (game.sideLen - 1) * hexSmallR;\n                        const rowStartX = r * hexSmallR - outOfBoundsWidth;\n                        return row.flatMap((cell, q) => {\n                            const p = { q, r };\n                            if (!game.inBounds(p)) return [];\n\n                            const centerX = offsetX + rowStartX + hexSmallD * q;\n                            const centerY = offsetY + hexBigR * 1.5 * r;\n\n                            return [\n                                <RegularPolygon\n                                    sides={6}\n                                    radius={hexBigR}\n                                    fill={color(cell.state)}\n                                    stroke=\"black\"\n                                    strokeWidth={1}\n                                    x={centerX}\n                                    y={centerY}\n                                    key={`${q}_${r}`}\n                                    onClick={evt => {\n                                        if (evt.evt.button !== 0) return;\n                                        if (!canPlace(game.at(p))) return;\n\n                                        setGame(prev => prev.move(p));\n                                    }}\n                                />,\n                                isEmpty(cell) && cell.visibleA - cell.visibleB !== 0 && <Text\n                                    text={Math.abs(cell.visibleA - cell.visibleB).toString()}\n                                    x={centerX - hexSmallR}\n                                    y={centerY - hexBigR}\n                                    width={hexSmallD}\n                                    height={hexBigD}\n                                    align=\"center\"\n                                    verticalAlign=\"middle\"\n                                    fontSize={24}\n                                    key={`${q}_${r}_text`}\n                                    listening={false}\n                                />\n                            ];\n                        })\n                    })}\n                </Layer>\n            </Stage>\n        </div>\n    </>\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './Board';\n\nconst App = () => {\n    return <div className=\"App\">\n        <Board/>\n    </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}